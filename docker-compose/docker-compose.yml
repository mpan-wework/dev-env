version: '3'
networks:
  dev-env-network:
    name: dev-env-network
services:
  redis5:
    container_name: redis5
    image: redis:5.0.8-alpine3.11
    ports:
      - 46379:6379
    volumes:
      - ./.volumes/redis5/data:/data
    networks:
      - dev-env-network
  mysql5:
    container_name: mysql5
    image: mysql:5.7.28
    environment:
      MYSQL_ROOT_PASSWORD: pa55w0rd
      MYSQL_USER: mike
      MYSQL_PASSWORD: pa55w0rd5
    ports:
      - 53305:3306
    volumes:
      - ./.volumes/mysql5/data:/var/lib/mysql
  mysql8:
    container_name: mysql8
    image: mysql:8.0.19
    environment:
      MYSQL_ROOT_PASSWORD: pa55w0rd
      MYSQL_USER: mike
      MYSQL_PASSWORD: pa55w0rd8
    ports:
      - 53308:3306
    volumes:
      - ./.volumes/mysql8/data:/var/lib/mysql
    networks:
      - dev-env-network
  pg12:
    container_name: pg12
    image: postgres:12.2-alpine
    environment:
      POSTGRES_PASSWORD: pa55w0rd
      POSTGRES_USER: mike
    ports:
      - 55432:5432
    volumes:
      - ./.volumes/pg12/data:/var/lib/postgresql/data
    networks:
      - dev-env-network
  rabbitmq3:
    container_name: rabbitmq3
    image: rabbitmq:3.8.3-management-alpine
    environment:
      RABBITMQ_ERLANG_COOKIE: c00k1e
    ports:
      - 55670:4369
      - 55671:5671
      - 55672:5672
      - 55673:15671
      - 55674:15672
      - 55675:15675
      - 55676:25672
      - 55683:1883
    volumes:
      - ./.volumes/rabbitmq3/data:/var/lib/rabbitmq
    networks:
      - dev-env-network
  jenkins:
    container_name: jenkins
    build:
      context: jenkins
      dockerfile: jenkins.dockerfile
    environment:
      JAVA_OPTS: '-Djenkins.install.runSetupWizard=false'
      CASC_JENKINS_CONFIG: /var/jenkins_home/jenkins.yaml
    ports:
      - 58080:8080
      - 58081:50000
    volumes:
      - ./.volumes/jenkins/data:/var/jenkins_home
      - ./jenkins/casc.yaml:/var/jenkins_home/jenkins.yaml
      - /var/run/docker.sock:/var/run/docker.sock # share host docker daemon with container
    networks:
      - dev-env-network
  mssql19:
    container_name: mssql2019
    image: mcr.microsoft.com/mssql/server:2019-CU8-ubuntu-16.04
    user: root
    environment:
      ACCEPT_EULA: 'Y'
      SA_PASSWORD: Pa55w0rd!
      MSSQL_PID: Express
    ports:
      - 51433:1433
      - 51434:1434
    volumes:
      - ./.volumes/mssql19/data:/var/opt/mssql
    networks:
      - dev-env-network
  mongo4:
    container_name: mongo4
    image: mongo:4.4.9
    ports:
      - 57017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pa55w0rd
    volumes:
      - ./.volumes/mongo4/data:/data/db
    networks:
      - dev-env-network
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:7.2.0
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - ./.volumes/zookeeper/data:/var/lib/zookeeper/data
    networks:
      - dev-env-network
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.2.0
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: '1'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,BROKER://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_ADVERTISED_LISTENERS: BROKER://127.0.0.1:9092
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: '1'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
    volumes:
      - ./kafka/ensure:/etc/confluent/docker/ensure
      - ./.volumes/kafka/data:/var/lib/kafka/data
    networks:
      - dev-env-network
